{"version":3,"sources":["orderController.js"],"names":["order","Order","order1","order2","order3","mapOrderList","Map","orderId","getOrderList","req","res","status","send","createOrder","json","body","newOrder","orderDate","orderAmount","orderStatus","shippingAddress","set","end","getOrder","id","params","orderFound","get","console","log","updateOrder"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA,IAAMA,QAAQ,IAAIC,gBAAJ,CAAU,kBAAV,EAAkB,YAAlB,EAAgC,MAAhC,EAAwC,KAAxC,EAA+C,yBAA/C,CAAd;AACA,IAAMC,SAAS,IAAID,gBAAJ,CAAU,kBAAV,EAAkB,YAAlB,EAAgC,MAAhC,EAAwC,WAAxC,EAAqD,yBAArD,CAAf;AACA,IAAME,SAAS,IAAIF,gBAAJ,CAAU,kBAAV,EAAkB,YAAlB,EAAgC,MAAhC,EAAwC,UAAxC,EAAoD,yBAApD,CAAf;AACA,IAAMG,SAAS,IAAIH,gBAAJ,CAAU,OAAV,EAAmB,YAAnB,EAAiC,MAAjC,EAAyC,UAAzC,EAAqD,yBAArD,CAAf;;AAEA,IAAMI,eAAe,IAAIC,GAAJ,CAAQ,CAAC,CAACN,MAAMO,OAAP,EAAgBP,KAAhB,CAAD,EAAyB,CAACE,OAAOK,OAAR,EAAiBL,MAAjB,CAAzB,EAC3B,CAACC,OAAOI,OAAR,EAAiBJ,MAAjB,CAD2B,EACD,CAACC,OAAOG,OAAR,EAAiBH,MAAjB,CADC,CAAR,CAArB;;AAGA;AACA,SAASI,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9BA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBP,YAArB;AACD;;AAED;AACA,SAASQ,WAAT,CAAqBJ,GAArB,EAA0BC,GAA1B,EAA+B;AAC7B;;AAEA;AACA,MAAMI,OAAOL,IAAIM,IAAjB;;AAEA,MAAMC,WAAW,IAAIf,gBAAJ,CAAUa,KAAKP,OAAf,EAAwBO,KAAKG,SAA7B,EACfH,KAAKI,WADU,EACGJ,KAAKK,WADR,EAEfL,KAAKM,eAFU,CAAjB;;AAIA;AACA,MAAI,CAAE,2BAASJ,QAAT,CAAN,EAA2B;AACzBX,iBAAagB,GAAb,CAAiBL,SAAST,OAA1B,EAAmCS,QAAnC;AACD;;AAEDN,MAAIC,MAAJ,CAAW,GAAX,EAAgBW,GAAhB;AACD;;AAED;AACA,SAASC,QAAT,CAAkBd,GAAlB,EAAuBC,GAAvB,EAA4B;AAAA,MAClBc,EADkB,GACXf,IAAIgB,MADO,CAClBD,EADkB;;;AAG1B,MAAME,aAAarB,aAAasB,GAAb,CAAiBH,EAAjB,CAAnB;;AAEAI,UAAQC,GAAR,CAAY,UAAZ,EAAwBH,UAAxB;;AAEAhB,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBc,UAArB;AACD;;AAED;AACA,SAASI,WAAT,CAAqBrB,GAArB,EAA0BC,GAA1B,EAA+B;AAAA,MACrBc,EADqB,GACdf,IAAIgB,MADU,CACrBD,EADqB;AAE7B;;AAF6B,MAGrBL,WAHqB,GAGLV,IAAIM,IAHC,CAGrBI,WAHqB;;;AAK7B,MAAMO,aAAarB,aAAasB,GAAb,CAAiBH,EAAjB,CAAnB;;AAEAI,UAAQC,GAAR,CAAY,UAAZ,EAAwBH,UAAxB;;AAEA;AACAA,aAAWP,WAAX,GAAyBA,WAAzB;;AAEAS,UAAQC,GAAR,CAAY,kBAAZ,EAAgCH,UAAhC;;AAEAhB,MAAIC,MAAJ,CAAW,GAAX,EAAgBW,GAAhB;AACD;;AAGD;QAEEd,Y,GAAAA,Y;QAAcK,W,GAAAA,W;QAAaU,Q,GAAAA,Q;QAAUO,W,GAAAA,W","file":"orderController.js","sourceRoot":"C:/Users/Proception/Desktop/And challenge/Andela Challenge BootCamp/Fast Food Fast Project/fast-food-app/controllers","sourcesContent":["import uuid from 'uuid/v4';\nimport Order from '../models/orders';\nimport { jsonIsEmpty as validate } from '../utils/validate';\n// const validate = require('../utils/validate');\n\nconst order = new Order(uuid(), '12/13/2018', 500000, 'new', '13, ayoade str, shomolu');\nconst order1 = new Order(uuid(), '12/13/2019', 700000, 'fulfilled', '14, ayoade str, shomolu');\nconst order2 = new Order(uuid(), '12/13/2017', 600000, 'declined', '15, ayoade str, shomolu');\nconst order3 = new Order('12245', '12/13/2020', 900000, 'accepted', '16, ayoade str, shomolu');\n\nconst mapOrderList = new Map([[order.orderId, order], [order1.orderId, order1],\n  [order2.orderId, order2], [order3.orderId, order3]]);\n\n// Display list of all Orders.\nfunction getOrderList(req, res) {\n  res.status(200).send(mapOrderList);\n}\n\n// Create New Order.\nfunction createOrder(req, res) {\n  // console.log('old order List Size: ', orderList.length);\n\n  // Get POST params\n  const json = req.body;\n\n  const newOrder = new Order(json.orderId, json.orderDate,\n    json.orderAmount, json.orderStatus,\n    json.shippingAddress);\n\n  // Populate List in Memory if object is not empty\n  if (!(validate(newOrder))) {\n    mapOrderList.set(newOrder.orderId, newOrder);\n  }\n\n  res.status(201).end();\n}\n\n// Get single Order by Id\nfunction getOrder(req, res) {\n  const { id } = req.params;\n\n  const orderFound = mapOrderList.get(id);\n\n  console.log('Found : ', orderFound);\n\n  res.status(200).send(orderFound);\n}\n\n// Update Order by Id\nfunction updateOrder(req, res) {\n  const { id } = req.params;\n  // Get params in body\n  const { orderStatus } = req.body;\n\n  const orderFound = mapOrderList.get(id);\n\n  console.log('Found : ', orderFound);\n\n  // Set status\n  orderFound.orderStatus = orderStatus;\n\n  console.log('Order Updated : ', orderFound);\n\n  res.status(201).end();\n}\n\n\n// exports a function declared earlier\nexport {\n  getOrderList, createOrder, getOrder, updateOrder,\n};\n"]}